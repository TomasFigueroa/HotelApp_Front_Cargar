@page "/"

@inject IHTTPServicio http


<PageTitle>Gestion Hotel</PageTitle>

<main class="bg-fondo vh-100 p-3 container overflow-auto ">
    <div class="container overflow-hidden">
        <div class="row gap-1 justify-content-between">

 
        @if (Error)
        {
            <tr>@Mensaje</tr>
        }
        else
        {
            @if (habitaciones == null)
            {
                <tr>Cargando....</tr>
            }
            else if (habitaciones.Count == 0)
            {
                <tr>no existen datos</tr>
            }
            else
            {
            @foreach (var item in habitaciones)
            {
                <div class="col-lg-2 bg-white border-radius shadow p-0">
                    <div class="row gx-1 justify-content-between mb-4">
                        <div class="text-uppercase text-white text-center border-radius-top fw-bold pb-2" style="background-color: @ObtenerColorDeFondo(item.Estado)">
                            <p class="mb-1 ">@item.Nhab</p>
                            <p class="mb-0">@item.Estado</p>
                        </div>
                        <div class="px-2 pb-2 text-center">
                            <p class="fw-bold gris-claro m-0 py-4 "></p>
                            <button class="btn btn-secondary p-1 text-uppercase fw-bold font-xs">Ver habitacion</button>
                        </div>
                    </div>
                </div>
            }
            }
            }
           
        </div>
    </div>
</main>

@code {

    List<Habitacion> habitaciones;

    string Mensaje = "";
    bool Error;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Leer();
    }
    private async Task Leer()
    {
        var respuesta = await http.Get<List<Habitacion>>("api/Habitacion");
        Error = respuesta.Error;

        if (!respuesta.Error)
        {
            habitaciones = respuesta.Respuesta;
        }
        else
        {
            Mensaje = await respuesta.ObtenerError();
        }
    }

    private string ObtenerColorDeFondo(string estado)
    {
        switch (estado)
        {
            case "disponible":
                return "green"; // Cambia el color verde para el estado "activo"
            case "no disponible":
                return "red"; // Cambia el color rojo para el estado "inactivo"
            case "mantenimiento":
                return "gray"; // Color predeterminado para otros estados
            default:
                return "black";
        }
    }
}